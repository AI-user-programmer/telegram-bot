from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message
from datetime import datetime, timedelta
import asyncio
import signal
from pathlib import Path

from config import Config, load_config
from database import Database
from backup import DatabaseBackup
from logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('main')

class TimerBot:
    def __init__(self, config: Config):
        self.config = config
        self.bot = Bot(token=config.bot_token)
        self.dp = Dispatcher()
        self.db = Database()
        self.backup = DatabaseBackup("timer_bot.db")
        self.running = True
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.register_handlers()

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))
        self.dp.message.register(self.cmd_timer, Command("timer"))
        self.dp.message.register(self.cmd_list, Command("list"))
        self.dp.message.register(self.cmd_delete, Command("delete"))

    async def cmd_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            username = message.from_user.username or str(user_id)
            
            await self.db.add_user(user_id, username)
            
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/timer <—á–∞—Å—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
                "/list - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n"
                "/delete <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            )
            logger.info(f"New user started bot: {user_id} ({username})")
            
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = (
                "üìù –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                "1Ô∏è‚É£ /timer <—á–∞—Å—ã> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
                "   –ü—Ä–∏–º–µ—Ä: /timer 5 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —á–∞—Å–æ–≤\n\n"
                "2Ô∏è‚É£ /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n\n"
                "3Ô∏è‚É£ /delete <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É\n"
                "   –ü—Ä–∏–º–µ—Ä: /delete 1 - —É–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚Ññ1\n\n"
                f"‚ùóÔ∏è –ú–∞–∫—Å–∏–º—É–º {self.config.max_timers} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n"
                f"‚è∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {self.config.min_duration} —á–∞—Å\n"
                f"‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {self.config.max_duration} —á–∞—Å–æ–≤"
            )
            await message.answer(help_text)
            
        except Exception as e:
            logger.error(f"Error in help command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_timer(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /timer"""
        try:
            user_id = message.from_user.id
            args = message.text.split()
            
            if len(args) != 2:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /timer <—á–∞—Å—ã>\n"
                    "–ü—Ä–∏–º–µ—Ä: /timer 5"
                )
                return

            try:
                duration = int(args[1])
            except ValueError:
                await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º —á–∞—Å–æ–≤.")
                return

            if not self.config.min_duration <= duration <= self.config.max_duration:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {self.config.min_duration} "
                    f"–¥–æ {self.config.max_duration} —á–∞—Å–æ–≤."
                )
                return

            timer_id = await self.db.add_timer(user_id, duration)
            
            if timer_id is None:
                await message.answer(
                    f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ ({self.config.max_timers}).\n"
                    "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–∞–π–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /delete"
                )
                return

            end_time = datetime.now() + timedelta(hours=duration)
            await message.answer(
                f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
                f"‚è∞ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚åõÔ∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á."
            )
            logger.info(f"Timer {timer_id} created by user {user_id}")
            
        except Exception as e:
            logger.error(f"Error in timer command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_list(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
        try:
            user_id = message.from_user.id
            timers = await self.db.get_active_timers(user_id)
            
            if not timers:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")
                return

            response = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:\n\n"
            for timer in timers:
                end_time = datetime.fromtimestamp(timer['end_time'])
                remaining = end_time - datetime.now()
                hours = remaining.total_seconds() // 3600
                minutes = (remaining.total_seconds() % 3600) // 60
                
                response += (
                    f"üîî –¢–∞–π–º–µ—Ä #{timer['timer_number']}\n"
                    f"‚è∞ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚åõÔ∏è –û—Å—Ç–∞–ª–æ—Å—å: {int(hours)}—á {int(minutes)}–º–∏–Ω\n\n"
                )

            await message.answer(response)
            
        except Exception as e:
            logger.error(f"Error in list command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def cmd_delete(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
        try:
            user_id = message.from_user.id
            args = message.text.split()
            
            if len(args) != 2:
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <–Ω–æ–º–µ—Ä>\n"
                    "–ü—Ä–∏–º–µ—Ä: /delete 1"
                )
                return

            try:
                timer_number = int(args[1])
            except ValueError:
                await message.answer("‚ùå –ù–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                return

            if await self.db.delete_timer(user_id, timer_number):
                await message.answer(f"‚úÖ –¢–∞–π–º–µ—Ä #{timer_number} —É–¥–∞–ª–µ–Ω.")
                logger.info(f"Timer {timer_number} deleted by user {user_id}")
            else:
                await message.answer(f"‚ùå –¢–∞–π–º–µ—Ä #{timer_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except Exception as e:
            logger.error(f"Error in delete command: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def check_timers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
        while self.running:
            try:
                expired_timers = await self.db.check_expired_timers()
                
                for timer in expired_timers:
                    user_id = timer['user_id']
                    timer_number = timer['timer_number']
                    try:
                        await self.bot.send_message(
                            user_id,
                            f"‚è∞ –¢–∞–π–º–µ—Ä #{timer_number} –∑–∞–≤–µ—Ä—à–µ–Ω!"
                        )
                        logger.info(f"Timer {timer_number} notification sent to user {user_id}")
                    except Exception as e:
                        logger.error(f"Failed to send timer notification: {e}")

                await asyncio.sleep(self.config.check_interval)
                
            except Exception as e:
                logger.error(f"Error in timer checker: {e}")
                await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def maintenance_task(self):
        """–ó–∞–¥–∞—á–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î
                if not await self.db.check_database_integrity():
                    logger.error("Database integrity check failed")
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
                    latest_backup = await self.backup.get_latest_backup()
                    if latest_backup:
                        if await self.backup.restore_from_backup(str(latest_backup)):
                            logger.info("Database restored from backup")
                        else:
                            logger.error("Failed to restore database from backup")

                # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
                if await self.backup.create_backup():
                    self.backup.cleanup_old_backups(self.config.backup_keep_days)

                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î
                await self.db.optimize_database()
                
                await asyncio.sleep(self.config.maintenance_interval)
                
            except Exception as e:
                logger.error(f"Error in maintenance task: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
            await self.db.create_tables()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            asyncio.create_task(self.check_timers())
            asyncio.create_task(self.maintenance_task())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise
        finally:
            self.running = False

def setup_signal_handlers(timer_bot: TimerBot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    def signal_handler(signum, frame):
        logger.info("Received signal to terminate")
        timer_bot.running = False

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        timer_bot = TimerBot(config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers(timer_bot)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot...")
        await timer_bot.start()
        
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
if __name__ == '__main__':
    config = load_config()
    timer_bot = TimerBot(config)
    setup_signal_handlers(timer_bot)
    asyncio.run(timer_bot.start())
